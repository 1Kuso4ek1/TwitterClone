/**
 *
 *  Follows.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Models/Follows.hpp"
#include "Models/Users.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::whoitter;

const std::string Follows::Cols::_follower_id = "\"follower_id\"";
const std::string Follows::Cols::_followee_id = "\"followee_id\"";
const std::vector<std::string> Follows::primaryKeyName = {"follower_id","followee_id"};
const bool Follows::hasPrimaryKey = true;
const std::string Follows::tableName = "\"follows\"";

const std::vector<typename Follows::MetaData> Follows::metaData_={
{"follower_id","int32_t","integer",4,0,1,1},
{"followee_id","int32_t","integer",4,0,1,1}
};
const std::string &Follows::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Follows::Follows(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["follower_id"].isNull())
        {
            followerId_=std::make_shared<int32_t>(r["follower_id"].as<int32_t>());
        }
        if(!r["followee_id"].isNull())
        {
            followeeId_=std::make_shared<int32_t>(r["followee_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            followerId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            followeeId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Follows::Follows(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            followerId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            followeeId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

Follows::Follows(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("follower_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["follower_id"].isNull())
        {
            followerId_=std::make_shared<int32_t>((int32_t)pJson["follower_id"].asInt64());
        }
    }
    if(pJson.isMember("followee_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["followee_id"].isNull())
        {
            followeeId_=std::make_shared<int32_t>((int32_t)pJson["followee_id"].asInt64());
        }
    }
}

void Follows::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            followerId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            followeeId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

void Follows::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("follower_id"))
    {
        if(!pJson["follower_id"].isNull())
        {
            followerId_=std::make_shared<int32_t>((int32_t)pJson["follower_id"].asInt64());
        }
    }
    if(pJson.isMember("followee_id"))
    {
        if(!pJson["followee_id"].isNull())
        {
            followeeId_=std::make_shared<int32_t>((int32_t)pJson["followee_id"].asInt64());
        }
    }
}

const int32_t &Follows::getValueOfFollowerId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(followerId_)
        return *followerId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Follows::getFollowerId() const noexcept
{
    return followerId_;
}
void Follows::setFollowerId(const int32_t &pFollowerId) noexcept
{
    followerId_ = std::make_shared<int32_t>(pFollowerId);
    dirtyFlag_[0] = true;
}

const int32_t &Follows::getValueOfFolloweeId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(followeeId_)
        return *followeeId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Follows::getFolloweeId() const noexcept
{
    return followeeId_;
}
void Follows::setFolloweeId(const int32_t &pFolloweeId) noexcept
{
    followeeId_ = std::make_shared<int32_t>(pFolloweeId);
    dirtyFlag_[1] = true;
}

void Follows::updateId(const uint64_t id)
{
}
typename Follows::PrimaryKeyType Follows::getPrimaryKey() const
{
    return std::make_tuple(*followerId_,*followeeId_);
}

const std::vector<std::string> &Follows::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "follower_id",
        "followee_id"
    };
    return inCols;
}

void Follows::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getFollowerId())
        {
            binder << getValueOfFollowerId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFolloweeId())
        {
            binder << getValueOfFolloweeId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Follows::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Follows::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getFollowerId())
        {
            binder << getValueOfFollowerId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFolloweeId())
        {
            binder << getValueOfFolloweeId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Follows::toJson() const
{
    Json::Value ret;
    if(getFollowerId())
    {
        ret["follower_id"]=getValueOfFollowerId();
    }
    else
    {
        ret["follower_id"]=Json::Value();
    }
    if(getFolloweeId())
    {
        ret["followee_id"]=getValueOfFolloweeId();
    }
    else
    {
        ret["followee_id"]=Json::Value();
    }
    return ret;
}

Json::Value Follows::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getFollowerId())
            {
                ret[pMasqueradingVector[0]]=getValueOfFollowerId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFolloweeId())
            {
                ret[pMasqueradingVector[1]]=getValueOfFolloweeId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getFollowerId())
    {
        ret["follower_id"]=getValueOfFollowerId();
    }
    else
    {
        ret["follower_id"]=Json::Value();
    }
    if(getFolloweeId())
    {
        ret["followee_id"]=getValueOfFolloweeId();
    }
    else
    {
        ret["followee_id"]=Json::Value();
    }
    return ret;
}

bool Follows::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("follower_id"))
    {
        if(!validJsonOfField(0, "follower_id", pJson["follower_id"], err, true))
            return false;
    }
    else
    {
        err="The follower_id column cannot be null";
        return false;
    }
    if(pJson.isMember("followee_id"))
    {
        if(!validJsonOfField(1, "followee_id", pJson["followee_id"], err, true))
            return false;
    }
    else
    {
        err="The followee_id column cannot be null";
        return false;
    }
    return true;
}
bool Follows::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Follows::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("follower_id"))
    {
        if(!validJsonOfField(0, "follower_id", pJson["follower_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("followee_id"))
    {
        if(!validJsonOfField(1, "followee_id", pJson["followee_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool Follows::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Follows::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Users Follows::getFollower(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from users where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *followerId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Users(r[0]);
}

void Follows::getFollower(const DbClientPtr &clientPtr,
                          const std::function<void(Users)> &rcb,
                          const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from users where id = $1";
    *clientPtr << sql
               << *followerId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Users(r[0]));
                    }
               }
               >> ecb;
}
Users Follows::getFollowee(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from users where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *followeeId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Users(r[0]);
}

void Follows::getFollowee(const DbClientPtr &clientPtr,
                          const std::function<void(Users)> &rcb,
                          const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from users where id = $1";
    *clientPtr << sql
               << *followeeId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Users(r[0]));
                    }
               }
               >> ecb;
}
