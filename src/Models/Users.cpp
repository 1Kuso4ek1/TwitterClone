/**
 *
 *  Users.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Models/Users.hpp"
#include "Models/Follows.hpp"
#include "Models/Likes.hpp"
#include "Models/Posts.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::whoitter;

const std::string Users::Cols::_id = "\"id\"";
const std::string Users::Cols::_username = "\"username\"";
const std::string Users::Cols::_display_name = "\"display_name\"";
const std::string Users::Cols::_avatar_url = "\"avatar_url\"";
const std::string Users::Cols::_oauth_id = "\"oauth_id\"";
const std::string Users::primaryKeyName = "id";
const bool Users::hasPrimaryKey = true;
const std::string Users::tableName = "\"users\"";

const std::vector<typename Users::MetaData> Users::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"username","std::string","character varying",50,0,0,1},
{"display_name","std::string","character varying",100,0,0,0},
{"avatar_url","std::string","text",0,0,0,0},
{"oauth_id","std::string","character varying",255,0,0,0}
};
const std::string &Users::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Users::Users(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["username"].isNull())
        {
            username_=std::make_shared<std::string>(r["username"].as<std::string>());
        }
        if(!r["display_name"].isNull())
        {
            displayName_=std::make_shared<std::string>(r["display_name"].as<std::string>());
        }
        if(!r["avatar_url"].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(r["avatar_url"].as<std::string>());
        }
        if(!r["oauth_id"].isNull())
        {
            oauthId_=std::make_shared<std::string>(r["oauth_id"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            displayName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            oauthId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Users::Users(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            displayName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            oauthId_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

Users::Users(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("display_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["display_name"].isNull())
        {
            displayName_=std::make_shared<std::string>(pJson["display_name"].asString());
        }
    }
    if(pJson.isMember("avatar_url"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["avatar_url"].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(pJson["avatar_url"].asString());
        }
    }
    if(pJson.isMember("oauth_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["oauth_id"].isNull())
        {
            oauthId_=std::make_shared<std::string>(pJson["oauth_id"].asString());
        }
    }
}

void Users::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            displayName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            oauthId_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

void Users::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("display_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["display_name"].isNull())
        {
            displayName_=std::make_shared<std::string>(pJson["display_name"].asString());
        }
    }
    if(pJson.isMember("avatar_url"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["avatar_url"].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(pJson["avatar_url"].asString());
        }
    }
    if(pJson.isMember("oauth_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["oauth_id"].isNull())
        {
            oauthId_=std::make_shared<std::string>(pJson["oauth_id"].asString());
        }
    }
}

const int32_t &Users::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Users::getId() const noexcept
{
    return id_;
}
void Users::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Users::PrimaryKeyType & Users::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Users::getValueOfUsername() const noexcept
{
    static const std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getUsername() const noexcept
{
    return username_;
}
void Users::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[1] = true;
}
void Users::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[1] = true;
}

const std::string &Users::getValueOfDisplayName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(displayName_)
        return *displayName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getDisplayName() const noexcept
{
    return displayName_;
}
void Users::setDisplayName(const std::string &pDisplayName) noexcept
{
    displayName_ = std::make_shared<std::string>(pDisplayName);
    dirtyFlag_[2] = true;
}
void Users::setDisplayName(std::string &&pDisplayName) noexcept
{
    displayName_ = std::make_shared<std::string>(std::move(pDisplayName));
    dirtyFlag_[2] = true;
}
void Users::setDisplayNameToNull() noexcept
{
    displayName_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Users::getValueOfAvatarUrl() const noexcept
{
    static const std::string defaultValue = std::string();
    if(avatarUrl_)
        return *avatarUrl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getAvatarUrl() const noexcept
{
    return avatarUrl_;
}
void Users::setAvatarUrl(const std::string &pAvatarUrl) noexcept
{
    avatarUrl_ = std::make_shared<std::string>(pAvatarUrl);
    dirtyFlag_[3] = true;
}
void Users::setAvatarUrl(std::string &&pAvatarUrl) noexcept
{
    avatarUrl_ = std::make_shared<std::string>(std::move(pAvatarUrl));
    dirtyFlag_[3] = true;
}
void Users::setAvatarUrlToNull() noexcept
{
    avatarUrl_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Users::getValueOfOauthId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(oauthId_)
        return *oauthId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getOauthId() const noexcept
{
    return oauthId_;
}
void Users::setOauthId(const std::string &pOauthId) noexcept
{
    oauthId_ = std::make_shared<std::string>(pOauthId);
    dirtyFlag_[4] = true;
}
void Users::setOauthId(std::string &&pOauthId) noexcept
{
    oauthId_ = std::make_shared<std::string>(std::move(pOauthId));
    dirtyFlag_[4] = true;
}
void Users::setOauthIdToNull() noexcept
{
    oauthId_.reset();
    dirtyFlag_[4] = true;
}

void Users::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Users::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "username",
        "display_name",
        "avatar_url",
        "oauth_id"
    };
    return inCols;
}

void Users::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDisplayName())
        {
            binder << getValueOfDisplayName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAvatarUrl())
        {
            binder << getValueOfAvatarUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getOauthId())
        {
            binder << getValueOfOauthId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Users::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Users::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDisplayName())
        {
            binder << getValueOfDisplayName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAvatarUrl())
        {
            binder << getValueOfAvatarUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getOauthId())
        {
            binder << getValueOfOauthId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Users::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getDisplayName())
    {
        ret["display_name"]=getValueOfDisplayName();
    }
    else
    {
        ret["display_name"]=Json::Value();
    }
    if(getAvatarUrl())
    {
        ret["avatar_url"]=getValueOfAvatarUrl();
    }
    else
    {
        ret["avatar_url"]=Json::Value();
    }
    if(getOauthId())
    {
        ret["oauth_id"]=getValueOfOauthId();
    }
    else
    {
        ret["oauth_id"]=Json::Value();
    }
    return ret;
}

Json::Value Users::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[1]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDisplayName())
            {
                ret[pMasqueradingVector[2]]=getValueOfDisplayName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAvatarUrl())
            {
                ret[pMasqueradingVector[3]]=getValueOfAvatarUrl();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getOauthId())
            {
                ret[pMasqueradingVector[4]]=getValueOfOauthId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getDisplayName())
    {
        ret["display_name"]=getValueOfDisplayName();
    }
    else
    {
        ret["display_name"]=Json::Value();
    }
    if(getAvatarUrl())
    {
        ret["avatar_url"]=getValueOfAvatarUrl();
    }
    else
    {
        ret["avatar_url"]=Json::Value();
    }
    if(getOauthId())
    {
        ret["oauth_id"]=getValueOfOauthId();
    }
    else
    {
        ret["oauth_id"]=Json::Value();
    }
    return ret;
}

bool Users::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, true))
            return false;
    }
    else
    {
        err="The username column cannot be null";
        return false;
    }
    if(pJson.isMember("display_name"))
    {
        if(!validJsonOfField(2, "display_name", pJson["display_name"], err, true))
            return false;
    }
    if(pJson.isMember("avatar_url"))
    {
        if(!validJsonOfField(3, "avatar_url", pJson["avatar_url"], err, true))
            return false;
    }
    if(pJson.isMember("oauth_id"))
    {
        if(!validJsonOfField(4, "oauth_id", pJson["oauth_id"], err, true))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, false))
            return false;
    }
    if(pJson.isMember("display_name"))
    {
        if(!validJsonOfField(2, "display_name", pJson["display_name"], err, false))
            return false;
    }
    if(pJson.isMember("avatar_url"))
    {
        if(!validJsonOfField(3, "avatar_url", pJson["avatar_url"], err, false))
            return false;
    }
    if(pJson.isMember("oauth_id"))
    {
        if(!validJsonOfField(4, "oauth_id", pJson["oauth_id"], err, false))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<Posts> Users::getPost(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from posts where user_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Posts> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Posts(row));
    }
    return ret;
}

void Users::getPost(const DbClientPtr &clientPtr,
                    const std::function<void(std::vector<Posts>)> &rcb,
                    const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from posts where user_id = $1";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Posts> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Posts(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Likes> Users::getLike(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from likes where user_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Likes> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Likes(row));
    }
    return ret;
}

void Users::getLike(const DbClientPtr &clientPtr,
                    const std::function<void(std::vector<Likes>)> &rcb,
                    const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from likes where user_id = $1";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Likes> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Likes(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Follows> Users::getFollow(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from follows where follower_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Follows> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Follows(row));
    }
    return ret;
}

void Users::getFollow(const DbClientPtr &clientPtr,
                      const std::function<void(std::vector<Follows>)> &rcb,
                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from follows where follower_id = $1";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Follows> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Follows(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Follows> Users::getFollowee(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from follows where followee_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Follows> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Follows(row));
    }
    return ret;
}

void Users::getFollowee(const DbClientPtr &clientPtr,
                        const std::function<void(std::vector<Follows>)> &rcb,
                        const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from follows where followee_id = $1";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Follows> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Follows(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
